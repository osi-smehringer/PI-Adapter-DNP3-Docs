{
    "content/configuration/configuration.html":  {
                                                     "href":  "content/configuration/configuration.html",
                                                     "title":  "Configuration",
                                                     "keywords":  "Configuration PI Adapter for DNP3 provides configuration of data source and data selection. The examples in the configuration topics use curl , a commonly available tool on both Windows and Linux. You can configure the adapter with any programming language or tool that supports making REST calls or with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation . To validate successful configurations, you can perform data retrieval (GET commands) with a browser, if available, on your device. For more information on PI Adapter configuration tools, see Configuration tools . Quick start This Quick Start guides you through setup of each configuration file available for PI Adapter for DNP3. As you complete each step, perform each required configuration to establish a data flow from a data source to one or more endpoints. Some configurations are optional. Important: If you want to complete the optional configurations, complete those tasks before the required tasks. Configure one or several DNP3 system components. See System components . Configure a DNP3 data source for each DNP3 device. See Data source . Optional : Configure schedules. See Schedules . Configure a DNP3 data selection for each DNP3 data source. See Data selection . Optional : Configure data filters, diagnostics and metadata, buffering, and logging See the following topics: Data filters Diagnostics and metadata Buffering Logging Configure one or several egress and health endpoints. See Egress endpoints and Health endpoints ."
                                                 },
    "content/configuration/configuration-examples.html":  {
                                                              "href":  "content/configuration/configuration-examples.html",
                                                              "title":  "Configuration examples",
                                                              "keywords":  "Configuration examples The following JSON samples provide examples for all configurations available for PI Adapter for DNP3. System components configuration with two DNP3 adapter instances [ { \"ComponentId\": \"DNP3-1\", \"ComponentType\": \"DNP3\" }, { \"ComponentId\": \"DNP3-2\", \"ComponentType\": \"DNP3\" }, { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] Adapter configuration { \"DNP3-1\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataSource\": { \"masterStationBehaviors\": [ { \"id\": \"poorNetworkConditions\", \"masterAddress\": 1, \"dataLinkLayerTimeout\": \"00:00:05\", \"dataLinkLayerRetries\": 5 }, { \"id\": \"defaultMasterBehavior\", \"masterAddress\": 1 } ], \"outstationBehaviors\": [ { \"id\": \"eventScans-integrityScan-noUnsolicited\", \"enableUnsolicited\": false, \"EventClasses\": [1, 2, 3], \"eventScanPeriod\": \"00:10:00\" }, { \"id\": \"busyOutstation\", \"applicationLayerTimeout\": \"00:00:30\", \"enableTimeSync\": false, \"integrityScanOnStartup\": false, \"integrityScanOnEventBufferOverflow\": false, \"integrityScanPeriod\": \"00:00:00\" }, { \"id\": \"class1Events\", \"applicationLayerTimeout\": \"00:00:03\", \"enableUnsolicited\": false, \"integrityScanOnStartup\": true, \"integrityScanOnEventBufferOverflow\": false, \"integrityScanPeriod\": \"00:00:00\", \"EventClasses\": [1], \"eventScanPeriod\": \"00:10:00\" } ], \"tcpChannels\": [ { \"masterStationBehaviorId\": \"defaultMasterBehavior\", \"hostNameOrIpAddress\": \"substation1.scadanetwork.int\", \"outstations\": [ { \"id\": \"outstation10\", \"dnpAddress\": 10, \"outstationBehaviorId\": \"eventScans-integrityScan-noUnsolicited\" }, { \"id\": \"outstation100\", \"dnpAddress\": 100, \"outstationBehaviorId\": \"busyOutstation\" } ] }, { \"masterStationBehaviorId\": \"poorNetworkConditions\", \"hostNameOrIpAddress\": \"outstation11.scadanetwork.int\", \"port\": 20001, \"outstations\": [ { \"id\": \"Outstation11\", \"dnpAddress\": 11, \"outstationBehaviorId\": \"class1Events\" } ] } ] }, \"DataSelection\": [ { \"outstationId\": \"Outstation1\", \"group\": 20, \"index\": 0 }, { \"selected\": false, \"streamId\": \"Outstation1.AnalogInput.7\", \"name\": null, \"outstationId\": \"Outstation1\", \"group\": 30, \"variation\": 0, \"index\": 7, \"StaticScanScheduleId\": null, \"dataFilterId\": null }, { \"streamId\": \"Outstation1.BinaryInput.Variation2.3\", \"name\": \"MyBinaryInputPoint\", \"outstationId\": \"Outstation1\", \"group\": 1, \"variation\": 2, \"index\": 3, \"StaticScanScheduleId\": \"schedule1\", \"dataFilterId\": \"DuplicateData\" }, { \"name\": \"MyDoubleBitBinaryInputPoint\", \"outstationId\": \"Outstation1\", \"group\": 3, \"index\": 2, \"StaticScanScheduleId\": \"schedule1\", \"dataFilterId\": \"DuplicateData\" }, { \"name\": \"MyOctetStringPoint\", \"outstationId\": \"Outstation1\", \"group\": 110, \"index\": 1 } ] }, \"System\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"HealthEndpoints\": [], \"Diagnostics\": { \"enableDiagnostics\": true }, \"Components\": [ { \"componentId\": \"Egress\", \"componentType\": \"OmfEgress\" }, { \"componentId\": \"DNP3-1\", \"componentType\": \"DNP3\" } ], \"Buffering\": { \"BufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/DNP3/Buffers\", \"C: ProgramData OSIsoft Adapters DNP3 Buffers\", \"MaxBufferSizeMB\": -1, \"EnableBuffering\": true } }, \"OmfEgress\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataEndpoints\": [ { \"id\": \"WebAPI EndPoint\", \"endpoint\": \"https://PIWEBAPIServer/piwebapi/omf\", \"https:  PIWEBAPIServer piwebapi omf\", \"userName\": \"USERNAME\", \"password\": \"PASSWORD\" }, { \"id\": \"OCS Endpoint\", \"endpoint\": \"https://OCSEndpoint/omf\", \"https:  OCSEndpoint omf\", \"clientId\": \"CLIENTID\", \"clientSecret\": \"CLIENTSECRET\" }, { \"Id\": \"EDS\", \"Endpoint\": \"http://localhost:/api/v1/tenants/default/namespaces/default/omf\", \"http:  localhost: api v1 tenants default namespaces default omf\", \"UserName\": \"eds\", \"Password\": \"eds\" } ] } } Data source configuration Use one of the following data source configurations examples for the DNP3 adapter as a template for your own configuration. Minimum configuration for a single outstation The following example is a configuration for a single outstation on a single TCP channel. { \"masterStationBehaviors\": [ { \"id\": \"masterBehavior1\", \"masterAddress\": 1 } ], \"outstationBehaviors\": [ { \"id\": \"outstationBehavior1\" } ], \"tcpChannels\": [ { \"masterStationBehaviorId\": \"masterBehavior1\", \"hostNameOrIpAddress\": \"outstation1.scadanetwork.int\", \"outstations\": [ { \"id\": \"Outstation1\", \"dnpAddress\": 10, \"outstationBehaviorId\": \"outstationBehavior1\" } ] } ] } Configuration for multiple outstations The following example is a configuration for two outstations that are on one channel and one outstation that is on a separate channel. Rather than using the default configurations, many configuration options are expressed here. { \"masterStationBehaviors\": [ { \"id\": \"poorNetworkConditions\", \"masterAddress\": 1, \"dataLinkLayerTimeout\": \"00:00:05\", \"dataLinkLayerRetries\": 5 }, { \"id\": \"defaultMasterBehavior\", \"masterAddress\": 1 } ], \"outstationBehaviors\": [ { \"id\": \"eventScans-integrityScan-noUnsolicited\", \"enableUnsolicited\": false, \"EventClasses\": [1, 2, 3], \"eventScanPeriod\": \"00:10:00\" }, { \"id\": \"busyOutstation\", \"applicationLayerTimeout\": \"00:00:30\", \"enableTimeSync\": false, \"integrityScanOnStartup\": false, \"integrityScanOnEventBufferOverflow\": false, \"integrityScanPeriod\": \"00:00:00\" }, { \"id\": \"class1Events\", \"applicationLayerTimeout\": \"00:00:03\", \"enableUnsolicited\": false, \"integrityScanOnStartup\": true, \"integrityScanOnEventBufferOverflow\": false, \"integrityScanPeriod\": \"00:00:00\", \"EventClasses\": [1], \"eventScanPeriod\": \"00:10:00\" } ], \"tcpChannels\": [ { \"masterStationBehaviorId\": \"defaultMasterBehavior\", \"hostNameOrIpAddress\": \"substation1.scadanetwork.int\", \"outstations\": [ { \"id\": \"outstation10\", \"dnpAddress\": 10, \"outstationBehaviorId\": \"eventScans-integrityScan-noUnsolicited\" }, { \"id\": \"outstation100\", \"dnpAddress\": 100, \"outstationBehaviorId\": \"busyOutstation\" } ] }, { \"masterStationBehaviorId\": \"poorNetworkConditions\", \"hostNameOrIpAddress\": \"outstation11.scadanetwork.int\", \"port\": 20001, \"outstations\": [ { \"id\": \"Outstation11\", \"dnpAddress\": 11, \"outstationBehaviorId\": \"class1Events\" } ] } ] } Data selection configuration The following is an example of a valid DNP3 data selection configuration. [ { \"outstationId\": \"Outstation1\", \"group\": 20, \"index\": 0 }, { \"selected\": false, \"streamId\": \"Outstation1.AnalogInput.7\", \"name\": null, \"outstationId\": \"Outstation1\", \"group\": 30, \"variation\": 0, \"index\": 7, \"StaticScanScheduleId\": null, \"dataFilterId\": null }, { \"streamId\": \"Outstation1.BinaryInput.Variation2.3\", \"name\": \"MyBinaryInputPoint\", \"outstationId\": \"Outstation1\", \"group\": 1, \"variation\": 2, \"index\": 3, \"StaticScanScheduleId\": \"schedule1\", \"dataFilterId\": \"DuplicateData\" }, { \"name\": \"MyDoubleBitBinaryInputPoint\", \"outstationId\": \"Outstation1\", \"group\": 3, \"index\": 2, \"StaticScanScheduleId\": \"schedule1\", \"dataFilterId\": \"DuplicateData\" }, { \"name\": \"MyOctetStringPoint\", \"outstationId\": \"Outstation1\", \"group\": 110, \"index\": 1 } ]"
                                                          },
    "content/configuration/data-selection.html":  {
                                                      "href":  "content/configuration/data-selection.html",
                                                      "title":  "Data selection",
                                                      "keywords":  "Data selection In addition to the data source configuration, you need to provide a data selection configuration to specify the data you want the DNP3 adapter to collect from your outstations. Depending on your data source configuration, your data selection configuration can be pre-populated by discovery. For more information, see PI Adapter for DNP3 data source configuration and Discovery . Configure DNP3 data selection Complete the following steps to configure a DNP3 data selection. Use the PUT method in conjunction with the api/v1/configuration/\u003cComponentId\u003e/DataSelection api v1 configuration \u003cComponentId\u003e DataSelection REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for a DNP3 data selection into the file. For sample JSON, see DNP3 data selection examples . Update the example JSON parameters for your environment. For a table of all available parameters, see DNP3 data selection parameters . Save the file. For example, as ConfigureDataSelection.json . Open a command line session. Change directory to the location of ConfigureDataSelection.json . Enter the following cURL command (which uses the PUT method) to initialize the data selection configuration. curl -d \"@ConfigureDataSelection.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/DNP3-1/DataSelection\" \"http:  localhost:5590 api v1 configuration DNP3-1 DataSelection\" Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. If you use a component ID other than DNP3-1 , update the endpoint with your chosen component ID and stream ID. For a list of other REST operations you can perform, like updating or deleting a data selection configuration, see REST URLs . DNP3 data selection schema The full schema definition for the DNP3 data source configuration is in the DNP3_DataSource_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\DNP3\\Schemas Linux: /opt/OSIsoft/Adapters/DNP3/Schemas  opt OSIsoft Adapters DNP3 Schemas DNP3 data selection parameters The following parameters are available to configure DNP3 data selection: Parameter Required Type Description Selected Optional boolean If true, data for this item is collected and sent to one or more configured OMF endpoint. Allowed value: true or false Default value: true StreamId Optional string The custom identifier used to create the streams. If not specified, the DNP3 adapter generates a default value based on the DefaultStreamIdPattern in the PI Adapter for DNP3 data source configuration . Name Optional string The optional friendly name of the data item collected from the data source. If not configured, the default value is the stream ID. OutstationId Required string The identifier of the outstation where the DNP point data should be collected from. Must match the Id of one of the configured outstations in the PI Adapter for DNP3 data source configuration . Group Required number The DNP3 object group number for the point. For a list of supported objects, see PI Adapter for DNP3 supported features . Variation Optional number The DNP3 object variation to be requested for the point during a static scan. For a list of supported objects, see PI Adapter for DNP3 supported features . Default value: 0 Index Required number The index of the point on the outstation. StaticScanScheduleId Optional string The identifier of a schedule defined in the Schedules configuration . By default, no static scan is configured. For more information, see Static data . DataFilterId Optional string The identifier of a data filter defined in the Data filters configuration . By default, no filter is applied. Note: If the specified DataFilterId does not exist, unfiltered data is sent until that DataFilterId is created. DNP3 data selection example The following is an example of a valid DNP3 data selection configuration. The first item is an example of a minimally configured selection item for a Counter Input point, the second item is an example of how an Analog Input point can be configured by Discovery , and the last three items show an example of some custom configurations for different DNP3 points. Notice that the second item is not selected; discovered items are not selected by default. [ { \"outstationId\": \"Outstation1\", \"group\": 20, \"index\": 0 }, { \"selected\": false, \"streamId\": \"Outstation1.AnalogInput.7\", \"name\": null, \"outstationId\": \"Outstation1\", \"group\": 30, \"variation\": 0, \"index\": 7, \"StaticScanScheduleId\": null, \"dataFilterId\": null }, { \"streamId\": \"Outstation1.BinaryInput.Variation2.3\", \"name\": \"MyBinaryInputPoint\", \"outstationId\": \"Outstation1\", \"group\": 1, \"variation\": 2, \"index\": 3, \"StaticScanScheduleId\": \"schedule1\", \"dataFilterId\": \"DuplicateData\" }, { \"name\": \"MyDoubleBitBinaryInputPoint\", \"outstationId\": \"Outstation1\", \"group\": 3, \"index\": 2, \"StaticScanScheduleId\": \"schedule1\", \"dataFilterId\": \"DuplicateData\" }, { \"name\": \"MyOctetStringPoint\", \"outstationId\": \"Outstation1\", \"group\": 110, \"index\": 1 } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/\u003cComponentId\u003e/DataSelection api v1 configuration \u003cComponentId\u003e DataSelection GET Retrieves the data selection configuration, including all data selection items. api/v1/configuration/\u003cComponentId\u003e/DataSelection api v1 configuration \u003cComponentId\u003e DataSelection PUT Configures or updates the data selection configuration. The adapter starts collecting data for each data selection item when the following conditions are met: ??? The data selection configuration PUT request is received. ??? A data source configuration is active. api/v1/configuration/\u003cComponentId\u003e/DataSelection api v1 configuration \u003cComponentId\u003e DataSelection DELETE Deletes the active data selection configuration. The adapter stops collecting data. api/v1/configuration/\u003cComponentId\u003e/DataSelection api v1 configuration \u003cComponentId\u003e DataSelection PATCH Allows partial updating of configured data selection items. Note: The request must be an array containing one or more data selection items. Each item in the array must include its StreamId . api/v1/configuration/\u003cComponentId\u003e/DataSelection/\u003cStreamId\u003e api v1 configuration \u003cComponentId\u003e DataSelection \u003cStreamId\u003e PUT Updates or creates a new data selection item by StreamId . For new items, the adapter starts collecting data after the request is received. api/v1/configuration/\u003cComponentId\u003e/DataSelection/\u003cStreamId\u003e api v1 configuration \u003cComponentId\u003e DataSelection \u003cStreamId\u003e DELETE Deletes a data selection item from the configuration by StreamId . The adapter stops collecting data for the deleted item. Note: Replace \u003cComponentId\u003e with the Id of your DNP3 component. For example, DNP3-1."
                                                  },
    "content/configuration/data-source.html":  {
                                                   "href":  "content/configuration/data-source.html",
                                                   "title":  "Data source",
                                                   "keywords":  "Data source To use the DNP3 adapter, you must configure the adapter to collect data from one or more DNP3 compliant outstations. The adapter can make many TCP connections by defining multiple TCP channels, and many connections to outstations by defining multiple outstation configurations. Configure DNP3 data source Complete the following steps to configure a DNP3 data source. Use the PUT method in conjunction with the api/v1/configuration/\u003cComponentId\u003e/DataSource api v1 configuration \u003cComponentId\u003e DataSource REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for a DNP3 data source into the file. For sample JSON, see DNP3 data source examples . Update the example JSON parameters for your environment. For a table of all available parameters, see DNP3 data source parameters . Save the file. For example, as ConfigureDataSource.json . Open a command line session. Change directory to the location of ConfigureDataSource.json . Enter the following cURL command (which uses the PUT method) to initialize the data source configuration. curl -d \"@ConfigureDataSource.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/DNP3-1/DataSource\" \"http:  localhost:5590 api v1 configuration DNP3-1 DataSource\" Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. If you use a component ID other than DNP3-1 , update the endpoint with your chosen component ID. For a list of other REST operations you can perform, like updating or deleting a data source configuration, see REST URLs . Configure data selection. Depending on your data source configuration, your data selection configuration can be pre-populated by discovery. For more information, see PI Adapter for DNP3 data selection configuration and Discovery . DNP3 data source schema The full schema definition for the DNP3 data source configuration is in the DNP3_DataSource_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\DNP3\\Schemas Linux: /opt/OSIsoft/Adapters/DNP3/Schemas  opt OSIsoft Adapters DNP3 Schemas DNP3 data source parameters Many of the data source configuration parameters are split into four categories: Parameters that define the adapter\u0027s behavior as a DNP3 master station are defined as MasterStationBehaviors . Parameters that define the general behaviors of the DNP3 outstations are defined as OutstationBehaviors . Parameters that define the connection information for a TCP channel are defined as TCPChannels . Parameters that define the connection information for a specific outstation are defined as Outstations . The following parameters are available to configure a DNP3 data source: Parameter Required Type Description MasterStationBehaviors Required array List of MasterStationBehavior objects that specifies the adapter\u0027s behavior as a DNP3 master station. For additional information, see MasterStationBehavior Parameters . OutstationBehaviors Required array List of OutstationBehavior objects that specifies general behaviors for DNP3 outstations. For additional information, see OutstationBehavior Parameters . TCPChannels Required array List of TCPChannel objects that specifies TCP connection information. For additional information, see TCPChannel Parameters . StreamIdPrefix Optional string Specifies what prefix is used for stream IDs. The naming convention is {StreamIdPrefix}{StreamId} .An empty string means no prefix will be added to the stream IDs and names. A null value defaults to ComponentID followed by a period. Example: DNP3-1.{OutstationId}.{DNPPointType}.{Index} Note: If you change the StreamIdPrefix of a configured adapter, for example when you delete and add a data source, you need to restart the adapter for the changes to take place. New streams are created on adapter restart and pre-existing streams are no longer updated. DefaultStreamIdPattern Optional string Specifies the default stream ID pattern to use. An empty or null value results in the default value. Possible parameters: {OutstationId} , {DNPPointType} , {Index} , {Group} , and {Variation} . Allowed value: any string Default value: {OutstationId}.{DNPPointType}.{Index} . MasterStationBehavior parameters The following parameters are available to configure each MasterStationBehavior in the MasterStationBehaviors array: Parameter Required Type Description Id Required string Friendly identifier for the configuration. Must be unique among all MasterStationBehaviors . MasterAddress Required number Address that the adapter uses when communicating on a channel. Must be an available address on the channel. Outstations can be configured to accept connections from this address. This is a 2 byte, unsigned integer. DataLinkLayerTimeout Optional string Period long enough for a Data Link Layer frame to be transmitted represented in hhh:mm:ss.fff format. Default value: 00:00:03 for 3 seconds DataLinkLayerRetries Optional number Number of times that the adapter re-sends a data link frame before resetting the link. Default value: 2 OutstationBehavior parameters The following parameters are available to configure each OutstationBehavior in the OutstationBehaviors array: Parameter Required Type Description Id Required string Friendly identifier for the configuration. Must be unique among all OutstationBehaviors . ApplicationLayerTimeout Optional string Period long enough for an entire Application Layer message to be transmitted represented in hh:mm:ss.fff format. Default value: 00:00:03 for 3 seconds EnableUnsolicited Optional boolean If true, the adapter accepts unsolicited messages from an outstation that is configured to send unsolicited event data. Allowed value: true or false Default value: true EnableTimeSync Optional boolean If true, the adapter writes the current time to an outstation that indicates \"NeedTime\" through the internal indication bits. Allowed value: true or false Default value: true IntegrityScanOnStartup Optional boolean If true, the adapter performs an integrity scan whenever the adapter or outstation is restarted. Allowed value: true or false Default value: true IntegrityScanOnEventBufferOverflow Optional boolean If true, the adapter performs an integrity scan whenever the outstation\u0027s event buffers overflow. Allowed value: true or false Default value: true IntegrityScanPeriod Optional string Frequency of integrity scans. Set to 00:00:00 for no periodic integrity scans represented in hh:mm:ss.fff format. Default value: 01:00:00 for 1 hour EventClasses Optional array List of event classes that the adapter scans during an event scan. Default is [1, 2, 3] , meaning all event classes. EventScanPeriod Optional string Frequency of event scans represented in hh:mm:ss.fff format. Set to 00:00:00 for no event scans. Default value: 00:00:00 TCPChannel parameters The following parameters are available to configure each channel in the TCPChannels array: Parameter Required Type Description HostNameOrIpAddress Required string IPv4 address or hostname that can be resolved to an IPv4 address. The adapter establishes a connection to this address. Port Optional number TCP port that the outstations are listening on. Default value: 20000 MasterStationBehaviorId Required string Must match the Id of one of the configurations in the MasterStationBehaviors list. Outstations Required array List of outstations that the adapter connects to on the TCPChannel . Note: A TCPChannel is uniquely identified by the combination of its HostNameOrIPAddress and Port properties. For valid configuration, each TCPChannel must have a unique combination of these properties. Outstation parameters The following parameters are available to configure each Outstation in the Outstations array within a TCPChannel : Parameter Required Type Description Id Required string Friendly identifier of the outstation. Must be unique among all channels and Outstations . Can be referenced by a data selection item. DNPAddress Required number Address of the Outstation on the channel. This is a 2 byte, unsigned integer. OutstationBehaviorId Required string Must match the Id of one of the configurations in the OutstationBehaviors array. DNP3 data source examples Minimum configuration for a single outstation The following example is a configuration for a single outstation on a single TCP channel. The optional configuration parameters have been omitted, so the default values are used. With the default configuration, the DNP3 adapter accepts unsolicited responses and perform an integrity scan every hour, potentially triggering Discovery . For more information about the default configuration, reference the tables above. { \"masterStationBehaviors\": [ { \"id\": \"masterBehavior1\", \"masterAddress\": 1 } ], \"outstationBehaviors\": [ { \"id\": \"outstationBehavior1\" } ], \"tcpChannels\": [ { \"masterStationBehaviorId\": \"masterBehavior1\", \"hostNameOrIpAddress\": \"outstation1.scadanetwork.int\", \"outstations\": [ { \"id\": \"Outstation1\", \"dnpAddress\": 10, \"outstationBehaviorId\": \"outstationBehavior1\" } ] } ] } Example configuration for multiple outstations The following example is a configuration for two outstations that are on one channel and one outstation that is on a separate channel. Rather than using the default configurations, many configuration options are expressed here. There are two MasterStationBehaviors , one of which increases the data link layer timeout and retry count. This can be needed when operating with network conditions that are less than ideal. Any TCPChannel that references the master station behavior poorNetworkConditions uses these settings, while TCPChannels that reference defaultMasterBehavior uses the default settings. There are three OutstationBehaviors : eventScans-integrityScan-noUnsolicited , busyOutstation , and class1Events : The behavior eventScans-integrityScan-noUnsolicited deviates from the default configuration options by disabling unsolicited responses and scanning for events every 10 minutes. This type of configuration is useful if the outstation does not support unsolicited events or it may be more efficient to scan for events periodically. The behavior busyOutstation deviates from the default configuration by increasing the application layer timeout, disabling the time sync, and disabling all integrity scans. Note: Disabling the integrity scan prevents discovery. Event scans are disabled by default. With this configuration, the DNP3 adapter only collects data if it is configured to collect static data . This type of configuration is useful if the outstation is very busy. For instance, the adapter can not be the only master communicating with this outstation, so another master station is responsible for syncing the outstation\u0027s time and polling for events. In addition, an integrity scan can put too much burden on the outstation if there are a large number of points. The behavior class1Events deviates from the default configuration by disabling unsolicited responses, only performing an integrity scan on startup, and only scanning for events from points assigned to class 1. This configuration is useful if you are not interested in collecting data for points assigned to class 2 or class 3. There are two TCPChannels configured. One channel has two outstations configured. This channel might represent a connection to a DNP3 gateway at a substation. The other TCPChannel only contains one configured outstation. This might represent a DNP3 device that is in a remote location. { \"masterStationBehaviors\": [ { \"id\": \"poorNetworkConditions\", \"masterAddress\": 1, \"dataLinkLayerTimeout\": \"00:00:05\", \"dataLinkLayerRetries\": 5 }, { \"id\": \"defaultMasterBehavior\", \"masterAddress\": 1 } ], \"outstationBehaviors\": [ { \"id\": \"eventScans-integrityScan-noUnsolicited\", \"enableUnsolicited\": false, \"EventClasses\": [ 1, 2, 3 ], \"eventScanPeriod\": \"00:10:00\" }, { \"id\": \"busyOutstation\", \"applicationLayerTimeout\": \"00:00:30\", \"enableTimeSync\": false, \"integrityScanOnStartup\": false, \"integrityScanOnEventBufferOverflow\": false, \"integrityScanPeriod\": \"00:00:00\" }, { \"id\": \"class1Events\", \"applicationLayerTimeout\": \"00:00:03\", \"enableUnsolicited\": false, \"integrityScanOnStartup\": true, \"integrityScanOnEventBufferOverflow\": false, \"integrityScanPeriod\": \"00:00:00\", \"EventClasses\": [ 1 ], \"eventScanPeriod\": \"00:10:00\" } ], \"tcpChannels\": [ { \"masterStationBehaviorId\": \"defaultMasterBehavior\", \"hostNameOrIpAddress\": \"substation1.scadanetwork.int\", \"outstations\": [ { \"id\": \"outstation10\", \"dnpAddress\": 10, \"outstationBehaviorId\": \"eventScans-integrityScan-noUnsolicited\" }, { \"id\": \"outstation100\", \"dnpAddress\": 100, \"outstationBehaviorId\": \"busyOutstation\" } ] }, { \"masterStationBehaviorId\": \"poorNetworkConditions\", \"hostNameOrIpAddress\": \"outstation11.scadanetwork.int\", \"port\": 20001, \"outstations\": [ { \"id\": \"Outstation11\", \"dnpAddress\": 11, \"outstationBehaviorId\": \"class1Events\" } ] } ] } REST URLs Relative URL HTTP verb Action api/v1/configuration/\u003cComponentId\u003e/DataSource api v1 configuration \u003cComponentId\u003e DataSource GET Retrieves the data source configuration. api/v1/configuration/\u003cComponentId\u003e/DataSource api v1 configuration \u003cComponentId\u003e DataSource POST Creates the data source configuration. The adapter starts collecting data after the following conditions are met: ??? The data source configuration POST request is received. ??? A data selection configuration is active. api/v1/configuration/\u003cComponentId\u003e/DataSource api v1 configuration \u003cComponentId\u003e DataSource PUT Configures or updates the data source configuration. Overwrites any active data source configuration. If no configuration is active, the adapter starts collecting data after the following conditions are met: ??? The data source configuration PUT request is received. ??? A data selection configuration is active. api/v1/configuration/\u003cComponentId\u003e/DataSource api v1 configuration \u003cComponentId\u003e DataSource DELETE Deletes the data source configuration. After the request is received, the adapter stops collecting data. Note: Replace \u003cComponentId\u003e with the Id of your DNP3 component. For example, DNP3-1."
                                               },
    "content/configuration/system-components.html":  {
                                                         "href":  "content/configuration/system-components.html",
                                                         "title":  "System components",
                                                         "keywords":  "System components PI adapters use JSON configuration files in a protected directory on Windows and Linux to store configuration that is read on startup. While the files are accessible to view, OSIsoft recommends that you use REST or the EdgeCmd utility for any changes you make to the files. As part of making adapters as secure as possible, any passwords or secrets that you configure are stored in encrypted form where cryptographic key material is stored separately in a secure location. If you edit the files directly, the adapter may not work as expected. Note: You can edit any single component or facet of the system individually using REST, but you can also configure the system as a whole with a single REST call. Configure system components Complete the following steps to configure system components. Use the PUT method in conjunction with the http://localhost:5590/api/v1/configuration/system/components http:  localhost:5590 api v1 configuration system components REST endpoint to initialize the configuration. Using a text editor, create an empty text file. Copy and paste an example configuration for system components into the file. For sample JSON, see Examples . Update the example JSON parameters for your environment. For a table of all available parameters, see System components parameters . Save the file. For example, as ConfigureComponents.json . Open a command line session. Change directory to the location of ConfigureComponents.json . Enter the following cURL command (which uses the PUT method) to initialize the system components configuration. curl -d \"@ConfigureComponents.json\" -H \"Content-Type: application/json\" application json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/components\" \"http:  localhost:5590 api v1 configuration system components\" Notes: If you installed the adapter to listen on a non-default port, update 5590 to the port number in use. For a list of other REST operations you can perform, like updating or deleting a system components configuration, see REST URLs . System components schema The full schema definition for the system components configuration is in the System_Components_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas  opt OSIsoft Adapters AdapterName Schemas System components parameters You can configure the following parameters for system components: Parameters Required Type Description ComponentId Required string The ID of the component 1 . It can be any alphanumeric string. A properly configured ComponentID follows these rules: Cannot contain leading or trailing space Cannot use the following characters: \u003e \u003c /   : ? # [ ] @ ! $ \u0026 * \\ \" ( ) \\\\ + , ; = \\| ` { } ComponentType Required string The type of the component. There are two types of components: OmfEgress and the adapter. 1 1 Note: The OmfEgress component is required to run the adapter. Both its ComponentId and ComponentType are reserved and should not be modified. Examples Default system components configuration The default System_Components.json file for the System component contains the following information. [ { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] System components configuration with two adapter instances [ { \"ComponentId\": \"DNP3-1\", \"ComponentType\": \"DNP3\" }, { \"ComponentId\": \"DNP3-2\", \"ComponentType\": \"DNP3\" }, { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components api v1 configuration system components GET Retrieves the system components configuration api/v1/configuration/system/components api v1 configuration system components POST Adds a new component to the system configuration api/v1/configuration/system/components api v1 configuration system components PUT Updates the system components configuration api/v1/configuration/system/components/ api v1 configuration system components  componentId DELETE Deletes a specific component from the system components configuration Note: All the logs and configurations files for the deleted components are moved to the corresponding logs/Removed logs Removed or Configuration/Removed Configuration Removed folder. api/v1/configuration/system/components/ api v1 configuration system components  componentId PUT Creates a new component with the specified componentId in the system configuration"
                                                     },
    "content/index.html":  {
                               "href":  "content/index.html",
                               "title":  "Overview",
                               "keywords":  "Overview PI Adapter for DNP3 is a data-collection component that transfers time-series data from source devices to OMF (OSIsoft Message Format) endpoints in OSIsoft Cloud Services or PI Servers. DNP3 is a communication protocol common in SCADA networks. The protocol is maintained by the DNP Users Group, and defined by IEEE Std 1815-2012. The adapter adheres to this standard and operates as a DNP3-L1 compliant master station, which communicates with compliant outstations through TCP/IP. TCP IP. Adapter installation You can install the adapter with a download kit that you can obtain from the OSIsoft Customer Portal. You can install the adapter on devices running either Windows or Linux operating systems. Adapter configuration Using the REST API, you can configure all functions of the adapter. The configurations are stored in JSON files. For data ingress, you must define an adapter component in the system components configuration for each device to which the adapter will connect. You configure each adapter component with the connection information for the device and the data to collect. For data egress, you must specify destinations for the data, including security for the outgoing connection. Additional configurations are available to egress health and diagnostics data, add buffering configuration to protect against data loss, and record logging information for troubleshooting purposes. Once you have configured the adapter and it is sending data, you can use administration functions to manage the adapter or individual ingress components of the adapter. Health and diagnostics functions monitor the status of connected devices, adapter system functions, the number of active data streams, the rate of data ingress, the rate of errors, and the rate of data egress. EdgeCmd utility OSIsoft also provides the EdgeCmd utility, a proprietary command line tool to configure and administer an adapter on both Linux and Windows operating systems. EdgeCmd utility is installed separately from the adapter."
                           },
    "content/installation/installation-using-docker.html":  {
                                                                "href":  "content/installation/installation-using-docker.html",
                                                                "title":  "Installation using Docker",
                                                                "keywords":  "Installation using Docker Docker is a set of tools that can be used on Linux to manage application deployments. This topic provides examples of how to create a Docker container with the DNP3 adapter. Note: If you want to use Docker, you must be familiar with the underlying technology and have determined that it is appropriate for your planned use of the DNP3 adapter. Docker is not a requirement to use the adapter. Create a startup script for the adapter Use a text editor and create a script similar to one of the following examples: Note: The script varies slightly by processor. ARM32 #!/bin/sh #! bin sh if [ -z $portnum ] ; then exec /DNP3_linux-arm/OSIsoft.Data.System.Host  DNP3_linux-arm OSIsoft.Data.System.Host else exec /DNP3_linux-arm/OSIsoft.Data.System.Host  DNP3_linux-arm OSIsoft.Data.System.Host --port:$portnum fi ARM64 #!/bin/sh #! bin sh if [ -z $portnum ] ; then exec /DNP3_linux-arm64/OSIsoft.Data.System.Host  DNP3_linux-arm64 OSIsoft.Data.System.Host else exec /DNP3_linux-arm64/OSIsoft.Data.System.Host  DNP3_linux-arm64 OSIsoft.Data.System.Host --port:$portnum fi AMD64 #!/bin/sh #! bin sh if [ -z $portnum ] ; then exec /DNP3_linux-x64/OSIsoft.Data.System.Host  DNP3_linux-x64 OSIsoft.Data.System.Host else exec /DNP3_linux-x64/OSIsoft.Data.System.Host  DNP3_linux-x64 OSIsoft.Data.System.Host --port:$portnum fi Name the script dnp3dockerstart.sh and save it to the directory where you plan to create the container. Create a Docker container containing the adapter Create the following Dockerfile in the directory where you want to create and run the container. Note: Dockerfile is the required name of the file. Use the variation according to your operating system. ARM32 FROM ubuntu WORKDIR /   RUN apt-get update \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates libicu60 libssl1.1 curl COPY dnp3dockerstart.sh /   RUN chmod +x /dnp3dockerstart.sh  dnp3dockerstart.sh ADD ./DNP3_linux-arm.tar.gz . DNP3_linux-arm.tar.gz . ENTRYPOINT [\"/dnp3dockerstart.sh\"] [\" dnp3dockerstart.sh\"] ARM64 FROM ubuntu WORKDIR /   RUN apt-get update \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates libicu66 libssl1.1 curl COPY dnp3dockerstart.sh /   RUN chmod +x /dnp3dockerstart.sh  dnp3dockerstart.sh ADD ./DNP3_linux-arm64.tar.gz . DNP3_linux-arm64.tar.gz . ENTRYPOINT [\"/dnp3dockerstart.sh\"] [\" dnp3dockerstart.sh\"] AMD64 (x64) FROM ubuntu WORKDIR /   RUN apt-get update \u0026\u0026 DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates libicu66 libssl1.1 curl COPY dnp3dockerstart.sh /   RUN chmod +x /dnp3dockerstart.sh  dnp3dockerstart.sh ADD ./DNP3_linux-x64.tar.gz . DNP3_linux-x64.tar.gz . ENTRYPOINT [\"/dnp3dockerstart.sh\"] [\" dnp3dockerstart.sh\"] Copy the DNP3_linux-\\\u003cplatform\u003e.tar.gz file to the same directory as the Dockerfile . Copy the dnp3dockerstart.sh script to the same directory as the Dockerfile . Run the following command line in the same directory (you may need to use the sudo command): docker build -t dnp3adapter . Run the adapter Docker container REST access from the local host to the Docker container Complete the following steps to run the container: Use the docker container image dnp3adapter that you created previously. Type the following command line (you may need to use the sudo command): docker run -d --network host dnp3adapter The default port 5590 is accessible from the host and you can make REST calls to DNP3 adapter from applications on the local host computer. In this example, all data stored by the adapter is stored in the container itself. When the container is deleted, the data stored is also deleted. Provide persistent storage for the Docker container Complete the following to run the container: Use the docker container image dnp3adapter created previously. Type the following command line (you may need to use the sudo command): docker run -d --network host -v /dnp3:/usr/share/OSIsoft/  dnp3: usr share OSIsoft  dnp3adapter The default port 5590 is accessible from the host and you can make REST calls to the DNP3 adapter from applications on the local host computer. In this example, data is written to a host directory on the local machine /dnp3  dnp3 rather than the container. You can specify any directory. Port number change To use a different port other than the default 5590 , you can specify a portnum variable on the docker run command line. For example, to start the DNP3 adapter using port 6000 instead of 5590 , use the following command line: docker run -d -e portnum=6000 --network host dnp3adapter This command accesses the REST API with port 6000 instead of port 5590 . The following curl command returns the configuration for the container. curl http://localhost:6000/api/v1/configuration http:  localhost:6000 api v1 configuration Remove REST access to the Docker container If you remove the --network host option from the docker run command, REST access is not possible from outside the container. This can be valuable when you want to host an application in the same container as the DNP3 adapter but do not want to have external REST access enabled."
                                                            },
    "content/installation/system-requirements.html":  {
                                                          "href":  "content/installation/system-requirements.html",
                                                          "title":  "System requirements",
                                                          "keywords":  "System requirements PI Adapter for DNP3 is supported on a variety of platforms and processors. Installation kits are available for the following platforms: Operating System Platform Installation Kit Processor(s) Windows 10 Enterprise Windows 10 IoT Enterprise x64 DNP3_win10-x64.msi Intel/AMD Intel AMD 64-bit processors Debian 9, 10 Ubuntu 18.04, 20.04 x64 DNP3_linux-x64.deb Intel/AMD Intel AMD 64-bit processors Debian 9, 10 Ubuntu 18.04, 20.04 ARM32 DNP3_linux-arm.deb Arm 32-bit processors Debian 9, 10 Ubuntu 18.04, 20.04 ARM64 DNP3_linux-arm64.deb Arm 64-bit processors Alternatively, you can use tar.gz files with binaries to build your own custom installers or containers for Linux. For more information on installation of the PI Adapter for DNP3 with a Docker container, see Install PI Adapter for DNP3 using Docker . Native runtime libraries Windows For Windows 10 installations, the latest Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017 and 2019 is required and installed by the PI Adapter for DNP3 installation kit. As a best practice, OSIsoft recommends to install the latest supported Microsoft Visual C++ downloads to receive the latest available updates. Linux For Linux based operating systems, the GNU C++ Standard library is required. PI Adapter for DNP3 depends on libstdc++.so.6.0.22 or newer. Newer versions of libstdc++.so must contain GLIBCXX_3.4.22 . In Debian, Ubuntu, and many other distributions, this library is distributed in the libstdc++6 package. This package is part of the base system for Debian 9 and 10, Ubuntu 18.04 and 20.04, as well as many other distributions, so there is often no action required for this dependency."
                                                      },
    "content/overview/principles-of-operation.html":  {
                                                          "href":  "content/overview/principles-of-operation.html",
                                                          "title":  "Principles of operation",
                                                          "keywords":  "Principles of operation The DNP3 adapter\u0027s operations focus on data collection and stream creation. Connectivity and interoperability The DNP3 adapter can connect to one or more DNP3 compliant outstations through TCP/IP TCP IP connections. The DNP3 adapter will not communicate with other DNP3 master stations. The total number of outstations that the adapter can connect to varies across different installation environments. The DNP3 adapter is designed to operate as a Level 1 (DNP3???L1) master station. DNP3-L1 defines minimum requirements for all DNP3 compliant devices. However, the adapter makes use of some Level 2, Level 3, and Level 4 functions. Some DNP3 compliant devices can not support these same features. Any functionality described in this documentation that is not required for Level 1 compliance is noted as such. Refer to the outstation documentation prior to using these features, as the adapter needs to be configured to only use the supported features of the outstation. Adapter configuration For the DNP3 adapter to start data collection, you need to configure the adapter by defining the following: Data source: Provide the information required to connect to your DNP3 compliant outstations. Data selection: Select the DNP points on the outstations you want the adapter to collect for data. Logging: Set up the logging attributes to manage the adapter logging behavior. For more information, see PI Adapter for DNP3 data source configuration , PI Adapter for DNP3 data selection configuration , and Logging configuration . Stream creation The DNP3 adapter creates types at startup. One stream is created for each selected DNP point represented by an item in the data selection configuration. Each stream contains three properties: Property name Data type Description Timestamp DateTime Timestamp of the value update for the DNP point Value Specified in the data selection configuration Value of the DNP point Quality Byte Data quality of the given DNP3 item update. Quality values are defined in Supported Features . Note: All streams contain the Quality property except if the DNP3 Point Type is Octet String . Certain metadata are sent with each stream created. The following metadata are common for every adapter type: ComponentID : Specifies the data source, for example, DNP3_1 ComponentType : Specifies the type of adapter, for example, DNP3 The following metadata is specific to DNP3: Outstation : Specifies the Id of the outstation that the stream data is collected from. For example, Outstation1 SourceId : Specifies the information used to uniquely identify the stream on the source system. For DNP3, this is the outstation Id, the DNP Point Type, and the index. For example, Outstation1.AnalogInput.3 Schedule : Specifies the schedule used to collect data for the stream. For DNP3, this correlates to the StaticScanScheduleId property of the selection item. For example, schedule1 Each stream created for a given DNP point has a unique identifier (stream ID). If you specify a custom stream ID for the DNP point in data selection configuration, the adapter uses that stream ID to create the stream. If the stream ID is not specified, the adapter uses the DefaultStreamIdPattern in the data source configuration to determine the stream ID. Discovery The DNP3 adapter can discover points on your DNP3 outstation by performing an integrity scan. For more information, see Integrity scans . Discovery populates your data selection configuration with items that represent points on the outstation. These items are unselected by default, so you can make changes to these items before you select them. The adapter can only discover points that are assigned to Class 0, Class 1, Class 2, or Class 3 on the outstation. Discovery can be demanding in terms of bandwidth and outstation resources, so the adapter only performs discovery for an outstation when the following criteria are met: The outstation is configured in the data source configuration. The adapter is configured to perform a startup integrity scan for that outstation. The data selection configuration contains no items that correlate to that outstation, either selected or unselected. To discover a new outstation, add the outstation to the data source configuration and configure a periodic integrity scan or a scan on startup. The adapter uses the startup integrity scan as a means for discovery. To configure a new outstation without triggering a discovery, you can add one or more selection items to correspond to the outstation. The items can be selected or unselected. Alternatively, you can configure the outstation behavior so that no startup integrity scan is performed. Without a startup integrity scan, discovery is not be possible. Data collection The DNP3 adapter can collect two different types of data from DNP3 compliant outstations: static data and event data. Static data The DNP3 specification defines static data as the current value of a DNP point at the time of a request. The DNP3 adapter can be configured to request static data by polling the outstation for a range of points that share an object group and variation, which are configured in the data selection configuration. Static data is reported with the current time of the adapter machine. When polling for static data at predefined rate, it is possible that quickly changing data can be missed by the adapter. It is also possible that the adapter receives multiple values representing the same event but with different timestamps. The adapter makes a request for the current value of specific points as configured in the data selection configuration file. The adapter requests this data through a range scan, which request the static data for a range of point indices that share a group and variation, as configured in the data selection configuration. The outstation should report the current value of each point, but the outstation is not required to report using the requested object variation. If the outstation responds with a different variation than what the adapter has requested, the adapter still sends the data it receives. This could lead to differences in the reported value versus what is expected in terms of precision and status. Support for requesting static data for DNP3 points through a range scan is at least a Level 2 functionality, and some groups and variations can be considered Level 3 or Level 4 functionality. Because of this, it is important to verify that your outstation supports this functionality before configuring the adapter to collect data in this manner. Some DNP3-L1 compliant outstations can optionally support this type of scan. Event data The DNP3 specification defines event data as the information that is retained regarding an event. An event is defined by the DNP3 specification as the occurrence of something significant happening. What constitutes an event can vary depending on the implementation of the outstation. Typically, an event results in a value change for a DNP point, although it is possible for an event to occur that does not change the value of any point on the outstation. Event data is saved at the outstations and should be kept until the adapter confirms that it has received the event object. The event object is the description of the event that the adapter should receive from the outstations. The event object can contain the value, time, and status code relating to the event and corresponding point. The exact information contained in the object is dependent on both the point type and variation defined in the DNP3 specification. DNP3 events belong to one of three different classes of data: Class 1, Class 2, or Class 3. These event classes can be used to group events by priority, though neither the DNP3 adapter nor the DNP3 specification assign significance to the three event classes. According to the DNP3 specification, all DNP3 ??? Level 1 compliant outstations accepts read requests for event class data. Event scans The DNP3 adapter can be configured to request event data through an event scan. During an event scan, the adapter polls the outstation(s) for the event data from each of the configured event classes. The event classes and the polling interval can be configured in the data source configuration. For more information, see PI Adapter for DNP3 data source configuration . Event scans offer several advantages over polling for static data. When polling for static data, it is possible to miss value changes for points on the outstation; however, event scans ensures that each outstation reports every event to the adapter. Similarly, even when polling quickly, some events could be missed if they do not change the value of the DNP point. If bandwidth is a concern, the adapter can make efficient use of the network by only requesting event data. When polling for static data, the outstation can report unchanging data unnecessarily, whereas event scans should only return new events. It is important that the adapter is configured to perform event scans at an interval that is not long enough to allow the outstation event buffers to become full. To determine what constitutes an event and how much time it takes before the buffer becomes full, refer to the documentation for a specific outstation. Unsolicited events In addition to the event scans above, the DNP3 adapter can be configured to receive unsolicited responses containing event data. An unsolicited response is a message sent from an outstation that the adapter did not explicitly request. If the adapter is configured to receive unsolicited data, outstations that support sending unsolicited data should report event data to the adapter as it occurs. This could eliminate the need for the adapter to poll the outstation(s) for data. The decision to configure the adapter to receive unsolicited data or to perform event scans should be carefully considered. Integrity scans The DNP3 adapter can be configured to perform an integrity scan on startup, when the outstation\u0027s event buffer overflows, at a defined interval, or any combination of the three. During an integrity scan, the adapter polls the outstations for events and then the current value of all points that are assigned to one of the event classes (or Class 0). The adapter performs an integrity scan by polling Object Group 60 . If bandwidth or outstation performance is a concern, carefully consider the value of an integrity scan, as the outstation can respond with data for many more points than the adapter is configured to collect data for. The adapter simply discards any data that it receives without a corresponding data selection item. To retrieve the current value of any points not assigned to an event class, the adapter needs to perform a static scan. If a startup integrity scan is configured, it will run whenever the adapter is started or whenever a shutdown is indicated by the outstation\u0027s IIN bits. It may also be used for discovery. Alternatively, if no startup integrity scan is configured, but an integrity scan at a set interval is defined, then the first integrity scan will still be performed when the adapter is started. In this scenario, the first integrity scan will not be used for discovery, because a startup integrity scan was not configured."
                                                      },
    "content/overview/supported-features.html":  {
                                                     "href":  "content/overview/supported-features.html",
                                                     "title":  "Supported features",
                                                     "keywords":  "Supported features The adapter supports specific DNP3 point types. Supported DNP point types You can configure PI Adapter for DNP3 to read data from each of the following point types as defined in the DNP3 specification. The conformance level defined for a request of each of these points is also listed. Responses can be considered a different conformance level. For more details, refer to the DNP3 specification. Note: Do not configure the adapter to request data for point types that are unsupported by your outstation. DNP3 point type Static object group Static object variations Event object group Event object group variations DNP3 conformance level Binary Input 0, 1 0, 1, 2 2 1, 2, 3 Level 1 Double-bit Binary Input 3 0, 1, 2, 3 4 1, 2, 3 Level 4 Counter 20 0, 1, 2, 3, 4, 5, 6, 7, 8 22 1, 2, 3, 4, 5, 6, 7, 8 Level 1 Analog Input 30 0, 1, 2, 3, 4, 5, 6 32 1, 2, 3, 4, 5, 6, 7, 8 Level 2 Octet String 1 110 0 - 255 111 1 - 255 Not required for any conformance level 1 Although the Octet String point type is supported by the adapter, if the value returned by the outstation contains any null characters (for example, ASCII 0x00 ), the string is truncated at the first null character. Note: Variation zero has a special meaning in DNP3. You can configure the adapter to request a variation zero for static scans and the outstation should return data in a variation that it prefers. The outstation is not allowed to specify variation zero in its response. The adapter will not request a specific variation for event data, but it is able to parse any of the variations listed above. Data Quality - Object Flags Many of the supported object variations include object flags. PI Adapter for DNP3 interprets these object flags as Data Quality and sends them as a 1 byte integer for the Quality property on the stream. Each bit in the object flag indicates a separate condition. The following table describes the flags for the supported types. For more information about object flags, refer to the DNP3 Protocol Specification. Bit 7 Bit 6 Bit 5 Bit 4 Bit 3 Bit 2 Bit 1 Bit 0 Binary Input Value Reserved CHATTER_FILTER LOCAL_FORCED REMOTE_FORCED COMM_LOST RESTART ONLINE Double-Bit Binary Input Value Value CHATTER_FILTER LOCAL_FORCED REMOTE_FORCED COMM_LOST RESTART ONLINE Counter Reserved DISCONTINUITY ROLLOVER LOCAL_FORCED REMOTE_FORCED COMM_LOST RESTART ONLINE Analog Input Reserved REFERENCE_ERR OVER_RANGE LOCAL_FORCED REMOTE_FORCED COMM_LOST RESTART ONLINE"
                                                 },
    "content/readme.html":  {
                                "href":  "content/readme.html",
                                "title":  "",
                                "keywords":  ""
                            },
    "content/release-notes/release-notes.html":  {
                                                     "href":  "content/release-notes/release-notes.html",
                                                     "title":  "Release notes",
                                                     "keywords":  "Release notes PI Adapter for DNP3 1.0 Overview This represents the initial standalone release for PI Adapter for DNP3. This product collects time series data and relevant metadata from DNP3 compliant outstations and sends it to configured OMF (OSIsoft Message Format) endpoints in OSIsoft Cloud Services or PI Servers. PI Adapter for DNP3 can also collect health and diagnostics information. It supports buffering, static and event data collection, automatic discovery of available data items on a data source, and various Windows and Linux-based operating systems as well as containerization. For more information, see the PI Adapter for DNP3 overview . Known issues There are no known issues at this time. System requirements Refer to the System Requirements . Installation Refer to the Install the adapter instructions. Uninstallation Refer to the Uninstall the adapter instructions. Security information and guidance OSIsoft???s commitment Because the PI System often serves as a barrier protecting control system networks and mission-critical infrastructure assets, OSIsoft is committed to (1) delivering a high-quality product and (2) communicating clearly what security issues have been addressed. This release of PI Adapter for DNP3 is the highest quality and most secure version of the PI Adapter for DNP3 released to date. OSIsoft\u0027s commitment to improving the PI System is ongoing, and each future version should raise the quality and security bar even further. Vulnerability communication The practice of publicly disclosing internally discovered vulnerabilities is consistent with the Common Industrial Control System Vulnerability Disclosure Framework developed by the Industrial Control Systems Joint Working Group (ICSJWG). Despite the increased risk posed by greater transparency, OSIsoft is sharing this information to help you make an informed decision about when to upgrade to ensure your PI System has the best available protection. For more information, refer to OSIsoft???s Ethical Disclosure Policy (https://www.osisoft.com/ethical-disclosure-policy) (https:  www.osisoft.com ethical-disclosure-policy) . To report a security vulnerability, refer to OSIsoft\u0027s Report a Security Vulnerability (https://www.osisoft.com/report-a-security-vulnerability) (https:  www.osisoft.com report-a-security-vulnerability) . Vulnerability scoring OSIsoft has selected the Common Vulnerability Scoring System (CVSS) to quantify the severity of security vulnerabilities for disclosure. To calculate the CVSS scores, OSIsoft uses the National Vulnerability Database (NVD) calculator maintained by the National Institute of Standards and Technology (NIST). OSIsoft uses Critical, High, Medium and Low categories to aggregate the CVSS Base scores. This removes some of the opinion related errors of CVSS scoring. As noted in the CVSS specification, Base score range from 0 for the lowest severity to 10 for the highest severity. Overview of new vulnerabilities found or fixed This section is intended to provide relevant security-related information to guide your installation or upgrade decision. OSIsoft is proactively disclosing aggregate information about the number and severity of PI Adapter for DNP3 security vulnerabilities that are fixed in this release. No security-related information is applicable to this release. Technical support and resources Refer to Technical support and feedback ."
                                                 },
    "content/troubleshooting/troubleshoot-pi-adapter-for-dnp3.html":  {
                                                                          "href":  "content/troubleshooting/troubleshoot-pi-adapter-for-dnp3.html",
                                                                          "title":  "Troubleshoot PI Adapter for DNP3",
                                                                          "keywords":  "Troubleshoot PI Adapter for DNP3 PI Adapter for DNP3 provides troubleshooting features that enable you to verify adapter configuration, confirm connectivity, and view message logs. If you are unable to resolve issues with the adapter or need additional guidance, contact OSIsoft Technical Support through the OSIsoft Customer Portal . Check configurations Incorrect configurations can interrupt data flow and cause errors in values and ranges. Perform the following steps to confirm correct configuration for your adapter. Navigate to data source configuration and verify the following for each configured data source item below: MasterStationBehaviors MasterAddress - The DNP address on the TCP Channel that the adapter is communicating on is unique. The adapter identifies itself using this address. If there is a conflict, the adapter may have trouble sending/receiving sending receiving DNP messages to outstations. DataLinkLayerTimeout - The timeout is appropriate for your network. If too small, communications may timeout before completing. If the value is too large, it will take longer to notice communication failures. The default is sufficient in most cases. OutstationBehaviors ApplicationLayerTimeout - The timeout is appropriate for your network. If too small, communications may timeout before completing. If the value is too large, it will take longer to notice communication failures. The default is sufficient in most cases. EnableUnsolicited - The outstations support unsolicited data. If outstations support unsolicited data, there may be no need to configure static or event scans. If your outstations do not support unsolicited data, then the value of this parameter is largely inconsequential. EnableTimeSync - The adapter machine has an accurate time sync. When enabled, the adapter provides the current time to an outstation when requested. If you do not want the outstations to sync with the adapter machine time, mark this as false. IntegrityScanOnStartup - The outstation can handle the burden of an integrity scan on startup. This scan places additional load on the outstation whenever the adapter or outstation is restarted. IntegrityScanOnEventBufferOverflow - The outstation can handle the burden of an integrity scan when the outstation\u0027s event buffer overflows. This scan places additional load on the outstation whenever outstation\u0027s event buffer overflows. IntegrityScanPeriod - The outstation can handle the burden of an integrity scan at this interval. This scan places additional load on the outstation whenever this interval passes. EventClasses - The points you want to collect event data for are in one of the event classes listed here. If your point is not in any event class, you may need to configure a static scan. EventScanPeriod - The interval is appropriate for your data collection needs. A too short interval may put unnecessary load on the network, adapter, and outstations. A too long interval may allow the outstation\u0027s event buffer to overflow. TCPChannel HostNameOrIpAddress - The hostname is resolvable from the adapter machine, the IP address is reachable, or both. Also, the outstation is listening at this hostname/address. hostname address. Otherwise, the adapter cannot connect to the outstation. Port - The firewalls between the adapter and outstation allow connections on this port. Also, the outstation is listening on this port. Otherwise, the adapter cannot connect to the outstation. MasterStationBehaviorId - This parameter matches the Id of one of the configurations in the MasterStationBehaviors list. Outstations DNPAddress - This parameter matches the DNP Address of your outstation. This is used as an identifier on the DNP network. The adapter only accepts data from an outstation at an address specified here in the configuration. OutstationBehaviorId - This parameter matches the Id of one of the configurations in the OutstationBehaviors list. Navigate to data selection configuration and verify the following for each configured data selection item below: OutstationId - This parameter matches the Id of one of the Outstation configurations. Group - This parameter matches the DNP3 object group number of the point that you want to collect data from. Variation - This variation is supported by your outstation. Behavior is outstation dependent if you specify a variation that is not supported. Index - This parameter matches the point index of the DNP3 point that you want to collect data from. StaticScanScheduleId - This parameter matches the Id of a schedule in the Schedules configuration. This is the interval at which a static scan is requested, but it is not required if no static scan is desired. DataFilterId - If configured, the referenced data filter exists. A non-existent or incorrect DataFilterId means that data filtering is not active. Navigate to egress endpoints configuration . For each configured endpoint, verify that the Endpoint and authentication properties are correct. For a PI server or EDS endpoint, verify UserName and Password . For an OCS endpoint, verify ClientId and ClientSecret . Check connectivity Perform the following steps to verify active connections to the data source and egress endpoints. Start PI Web API and verify that the PI point values are updating or start OCS and verify that the stream values are updating. If configured, use a health endpoint to determine the status of the adapter. For more information, see Health and diagnostics . Check logs Perform the following steps to view the adapter and endpoint logs to isolate issues for resolution. Navigate to the logs directory: Windows: %ProgramData%\\OSIsoft\\Adapters\\DNP3\\Logs Linux: /usr/share/OSIsoft/Adapters/DNP3/Logs  usr share OSIsoft Adapters DNP3 Logs . Optional: Change the log level of the adapter to receive more information and context. For more information, see Logging configuration ."
                                                                      },
    "README.html":  {
                        "href":  "README.html",
                        "title":  "PI-Adapter-DNP3-Docs",
                        "keywords":  "PI-Adapter-DNP3-Docs PI Adapter for DNP3 is a data-collection component that transfers time-series data from source devices to OMF (OSIsoft Message Format) endpoints in OSIsoft Cloud Services or PI Servers. This repository contains the documentation for PI Adapter for DNP3. You can access a readable version of this documentation here. License ?? 2019 - 2021 OSIsoft, LLC. All rights reserved. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 http:  www.apache.org licenses LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
                    }
}
